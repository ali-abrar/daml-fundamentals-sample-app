module Main where

data Terms = Terms
  with
    contractor : Party
    manager : Party
    comptroller : Party
    rate : Numeric 2
  deriving (Show, Eq)

template Offer
  with
    terms : Terms
  where
    ensure terms.rate > 0.00
    signatory terms.manager, terms.comptroller
    observer terms.contractor
    choice AcceptOffer : ContractId ServiceAgreement
      controller terms.contractor
      do
        create ServiceAgreement
          with
            terms
            minutes = 0
    choice RejectOffer : Text
        with reason : Text
        controller terms.contractor
        do
          pure reason

template ServiceAgreement
  with
    terms : Terms
    minutes : Int
  where
    ensure terms.rate > 0.00 && minutes >= 0
    signatory terms.contractor, terms.comptroller, terms.manager
    observer terms.comptroller, terms.manager
    key terms.contractor : Party
    maintainer key
    choice SubmitTime : ContractId ServiceAgreement
      with submitMinutes : Int
      controller terms.contractor
      do
        create this
          with
            terms
            minutes = this.minutes + submitMinutes
    choice ApproveTime : ContractId ServiceAgreement
      with approvedMinutes : Int
      controller terms.manager
      do
        assertMsg "Cannot approve more time than contractor has submitted" $
          approvedMinutes <= this.minutes
        create Invoice
          with
            comptroller = this.terms.comptroller
            contractor = this.terms.contractor
            invoiceMinutes = approvedMinutes
        create this
          with
            terms
            minutes = this.minutes - approvedMinutes

template Invoice
  with
    comptroller : Party
    contractor : Party
    invoiceMinutes : Int
  where
    ensure invoiceMinutes > 0
    signatory comptroller
    observer contractor
    choice PayInvoice : ()
      controller comptroller
      do
        (_, s) <- fetchByKey @ServiceAgreement contractor
        let amount = s.terms.rate * (intToNumeric invoiceMinutes / 60.00)
        debug $ "Paid $" <> show amount <> " to " <> show contractor
        pure ()
